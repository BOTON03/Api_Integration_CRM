const express = require('express')
const fs = require('fs');
const path = require('path');
const MegaSync = require('./megaProyectos');
const AttributeSync = require('./projectAttributes');
const ZohoToPostgresSyncProjects = require('./projects');
const CitiesSync = require('./cities');
const app = express()
const port = process.env.PORT || 5000
 
app.get('/', (req, res) => {
  res.send('Conexi√≥n exitosa: API operativa y en l√≠nea.');
});

app.post('/', async (req, res) => {
  console.log("==================================================================");
    console.log("üöÄ INICIANDO PROCESO DE SINCRONIZACI√ìN COMPLETO");
    console.log("==================================================================");

    try {
      // Instancias de sincronizaci√≥n
        const syncCities = new CitiesSync();
        const syncMega = new MegaSync();
        const syncAttributes = new AttributeSync();
        const syncProjects = new ZohoToPostgresSyncProjects();

        await Promise.all([
            syncCities.run(),
            syncMega.run(),
            syncAttributes.run(),
            syncProjects.run()
        ]);        
             
        res.send('Proceso de sincronizaci√≥n completado.');
    } catch (error) {
        console.error("\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
        console.error("üö® ERROR CR√çTICO: El proceso de sincronizaci√≥n se detuvo.");
        console.error(`   Mensaje: ${error.message}`);
        
        if (error.stack) {
             console.error(`   Stack Trace: ${error.stack}`);
        }
        if (error.response?.data) {
            console.error(`   Respuesta del API (Zoho): ${JSON.stringify(error.response.data)}`);
        }
        res.status(500).send('Error en el proceso de sincronizaci√≥n.');
    } finally {
        // El bloque `finally` se ejecuta siempre, haya habido √©xito o error.
        console.log("üèÅ Proceso de sincronizaci√≥n finalizado.");
        // <<< SE ELIMIN√ì TODA LA L√ìGICA DE LECTURA Y AN√ÅLISIS DEL ARCHIVO DE LOG.
    }
})
 
app.listen(port, () => {
  console.log(`[${new Date().toLocaleString()}] üõ†Ô∏è Modo development activo - escuchando en el puerto ${port}`);
})

 